<div class="left-side tweets">
  <h2>'BBC'</h2>
  <ul id="liveTweets" class="contentList">
      <!-- <li><span class="author">Richard</span>
        <span class="sentiment positive">Good</span>
        <span class="content">This is a fake tweet written by Rich, it may be 2 lines long!</span>
      </li>-->
  </ul>
</div>

<div class="analysis right-side">

  <div class="page">
    <h2>what are people talking about?</h2>
    <div id="hashtags"></div>
  </div>

  <div class="page">
    <h2>who are people talking about?</h2>
        <ul id="users">
        <!-- <li><img src="http://a0.twimg.com/profile_images/1399208454/Kibbe4_normal.jpg" /><span>Richard Caudle (10)</span><div style="width: 70%"></div></li>
         -->
    </ul>
  </div>

  <!-- <div class="page">
    <h2>sentiment</h2>
    <canvas id="mycanvas" width="800" height="600"></canvas>
  </div> -->

</div>

<script src="http://js.pusher.com/1.12/pusher.min.js"></script>
<script src="http://d3js.org/d3.v2.js"></script>
<script src="http://www.jasondavies.com/wordcloud/d3.layout.cloud.js"></script>

<script>

	var liveTweetsList = $('#liveTweets');
  var lastUserTrendsData = null;
  var lastHashtagsTrendsData = null;

  var usersList = $('#users');
  var usersColourList = d3.scale.category20b().range();

  var positiveLine = new TimeSeries();
  var negativeLine = new TimeSeries();

	Pusher.log = function( msg ) {
		if( window.console && window.console.log ) {
//			window.console.log( msg );
		}
	};

	$(document).ready(function() {
		
		// establish Pusher connection
		var pusher = new Pusher('<%= @app_key %>');

		var liveTweetsChannel = pusher.subscribe('live-tweets');

		liveTweetsChannel.bind('new-tweet', function(data) {
			displayTweet(data);
		});

		var usersChannel = pusher.subscribe('topic-trends-users');

		usersChannel.bind('new-data', function(data) {
			updateUsers(data);
		});

		var hashtagsChannel = pusher.subscribe('topic-trends-hashtags');

		hashtagsChannel.bind('new-data', function(data) {
			updateHashtags(data);
		});

    //setupGraph();

	});

	function displayTweet(data)
	{
		var sentimentClass = 'sentiment';
		var sentiment = '';

		if(data.sentiment > 0)
		{
			sentimentClass += ' positive';
			sentiment = 'good';
		}
		else if (data.sentiment < 0)
		{
			sentimentClass += ' negative';
			sentiment = 'bad';
		}
		else
		{
			sentimentClass += ' neutral';
			sentiment = '';
		}

		liveTweetsList.prepend('<li style="display:none"><span class="author">' + data.author + '</span>'
			+ '<span class="' + sentimentClass + '">' + sentiment + '</span>'
			+ '<span class="content">' + data.content + '</span>'
			+ '</li>');

    $("#liveTweets li:first").slideDown(350);

		if(liveTweetsList.children().length > 10)
			$('#liveTweets li:last-child').remove();
	}	

	function updateSentiment(data)
	{
    positiveVal = data.positive / (data.positive + data.negative) * 100;
    negativeVal = data.negative / (data.positive + data.negative) * 100;

    positiveLine.append(new Date().getTime(), positiveVal);
    negativeLine.append(new Date().getTime(), negativeVal);
	}

  function updateUsers(data)
  {

    if(lastUserTrendsData == null || !Object.identical(lastUserTrendsData, data))
    {
      lastUserTrendsData = data;

      usersList.hide();
      usersList.empty();

      // Calculate max value
      var maxTotal = 0;

      $.each(data, function(index, value) {
        if(parseInt(value.total) > maxTotal) 
        {
          maxTotal = value.total;
        }
      });

      $.each(data, function(index, value) {
        if(index < 7)
        {
          var endWidth = value.total / maxTotal * 90;

          usersList.append('<li><img src="' + value.image_url + '" /><span>'  + value.name + ' (@' + value.source_name + ')' + '</span><div style="background-color:' + usersColourList[index * 3] + '"></div></li>');

          $('#users li div:last').delay(300 + index * 100).animate({
              width: endWidth + '%'
              }, 300);
        }
      });

      usersList.slideDown(300);
      
    }
    else
    {
      console.log('Data not new!');
    }

  }

	function updateHashtags(data)
	{
    updateHashtagsCloud(data);
	}

  function setupGraph()
  {

      var smoothie = new SmoothieChart(
          { 
              grid: { strokeStyle: 'rgb(125, 0, 0)', fillStyle: 'rgb(60, 0, 0)', lineWidth: 1, millisPerLine: 2000, verticalSections: 6 }, 
              minValue: 0, maxValue: 100
            }
          );
      smoothie.addTimeSeries(positiveLine, { strokeStyle: 'rgb(0, 255, 0)', fillStyle: 'rgba(0, 255, 0, 0.4)', lineWidth: 3 });
      smoothie.addTimeSeries(negativeLine, { strokeStyle: 'rgb(255, 0, 0)', fillStyle: 'rgba(255, 0, 0, 0.3)', lineWidth: 3 });

      smoothie.streamTo(document.getElementById("mycanvas"), 1000);
  }

	
</script>

<script>

var w = $(window).width() * 0.70,
    h = $(window).height() * 0.75;

var fill = d3.scale.category20b();

var words = [],
    max,
    scale = 1,
    complete = 0,
    keyword = "",
    tags,
    fontSize,
    maxLength = 30;

var scaling = d3.scale.log().range([20, 100]);

/* For Hashtags visualisation */
var layoutTags = d3.layout.cloud().timeInterval(10).size([w, h])
      .fontSize(function(d) { return scaling(d.total); })
      .text(function(d) { return d.name; })
      .on("end", drawTags);

var svgTags = d3.select("#hashtags").append("svg")
    .attr("width", w)
    .attr("height", h);

var backgroundTags = svgTags.append("g");
var visTags = svgTags.append("g").attr("transform", "translate(" + [w >> 1, h >> 1] + ")");

function updateHashtagsCloud(terms) {
  layoutTags.font('Impact').spiral('archimedean');
  layoutTags.stop().words(terms).start();
}

function drawTags(data,bounds) {

  scale = bounds ? Math.min(
      w / Math.abs(bounds[1].x - w / 2),
      w / Math.abs(bounds[0].x - w / 2),
      h / Math.abs(bounds[1].y - h / 2),
      h / Math.abs(bounds[0].y - h / 2)) / 2 : 1;
  words = data;
  var text = visTags.selectAll("text")
      .data(words, function(d) { return d.text.toLowerCase(); });
  text.transition()
      .duration(1000)
      .attr("transform", function(d) { return "translate(" + [d.x, d.y] + ")rotate(" + d.rotate + ")"; })
      .style("font-size", function(d) { return d.size + "px"; });
  text.enter().append("text")
      .attr("text-anchor", "middle")
      .attr("transform", function(d) { return "translate(" + [d.x, d.y] + ")rotate(" + d.rotate + ")"; })
      .style("font-size", function(d) { return d.size + "px"; })
      .on("click", function(d) {
        load(d.text);
      })
      .style("opacity", 1e-6)
    .transition()
      .duration(1000)
      .style("opacity", 1);
  text.style("font-family", function(d) { return d.font; })
      .style("fill", function(d) { return fill(d.text.toLowerCase()); })
      .text(function(d) { return d.text; });
  var exitGroup = backgroundTags.append("g")
      .attr("transform", visTags.attr("transform"));
  var exitGroupNode = exitGroup.node();
  text.exit().each(function() {
    exitGroupNode.appendChild(this);
  });
  exitGroup.transition()
      .duration(1000)
      .style("opacity", 1e-6)
      .remove();
  visTags.transition()
      .delay(1000)
      .duration(750)
      .attr("transform", "translate(" + [w >> 1, h >> 1] + ")scale(" + scale + ")");
}


/* For USERS visualisation */

var layoutUsers = d3.layout.cloud().timeInterval(10).size([w, h])
      .fontSize(function(d) { return scaling(d.total); })
      .text(function(d) { return "@" + d.name; })
      .on("end", drawUsers);

var svgUsers = d3.select("#users").append("svg")
    .attr("width", w)
    .attr("height", h);

var backgroundUsers = svgUsers.append("g");
var visUsers = svgUsers.append("g").attr("transform", "translate(" + [w >> 1, h >> 1] + ")");

function updateUsersCloud(terms) {
  layoutUsers.font('Impact').spiral('archimedean');
  layoutUsers.stop().words(terms).start();
}

function drawUsers(data,bounds) {

  scale = bounds ? Math.min(
      w / Math.abs(bounds[1].x - w / 2),
      w / Math.abs(bounds[0].x - w / 2),
      h / Math.abs(bounds[1].y - h / 2),
      h / Math.abs(bounds[0].y - h / 2)) / 2 : 1;
  words = data;
  var text = visUsers.selectAll("text")
      .data(words, function(d) { return d.text.toLowerCase(); });
  text.transition()
      .duration(1000)
      .attr("transform", function(d) { return "translate(" + [d.x, d.y] + ")rotate(" + d.rotate + ")"; })
      .style("font-size", function(d) { return d.size + "px"; });
  text.enter().append("text")
      .attr("text-anchor", "middle")
      .attr("transform", function(d) { return "translate(" + [d.x, d.y] + ")rotate(" + d.rotate + ")"; })
      .style("font-size", function(d) { return d.size + "px"; })
      .on("click", function(d) {
        load(d.text);
      })
      .style("opacity", 1e-6)
    .transition()
      .duration(1000)
      .style("opacity", 1);
  text.style("font-family", function(d) { return d.font; })
      .style("fill", function(d) { return fill(d.text.toLowerCase()); })
      .text(function(d) { return d.text; });
  var exitGroup = backgroundUsers.append("g")
      .attr("transform", visUsers.attr("transform"));
  var exitGroupNode = exitGroup.node();
  text.exit().each(function() {
    exitGroupNode.appendChild(this);
  });
  exitGroup.transition()
      .duration(1000)
      .style("opacity", 1e-6)
      .remove();
  visUsers.transition()
      .delay(1000)
      .duration(750)
      .attr("transform", "translate(" + [w >> 1, h >> 1] + ")scale(" + scale + ")");
}


</script>